// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class LoginReq;
class RegisterReq;
class VerifyReq;
class LoginRsp;
class VerifyRsp;
class RegisterRsp;
class UserOnlineReq;
class UserOfflineReq;
class KickUserOutReq;
class DoSthReq;
class DoSthRsp;

// ===================================================================

class LoginReq : public ::google::protobuf::Message {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  void Swap(LoginReq* other);

  // implements Message ----------------------------------------------

  LoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string passwd = 2;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:LoginReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* passwd_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static LoginReq* default_instance_;
};
// -------------------------------------------------------------------

class RegisterReq : public ::google::protobuf::Message {
 public:
  RegisterReq();
  virtual ~RegisterReq();

  RegisterReq(const RegisterReq& from);

  inline RegisterReq& operator=(const RegisterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterReq& default_instance();

  void Swap(RegisterReq* other);

  // implements Message ----------------------------------------------

  RegisterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterReq& from);
  void MergeFrom(const RegisterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string passwd = 2;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:RegisterReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* passwd_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static RegisterReq* default_instance_;
};
// -------------------------------------------------------------------

class VerifyReq : public ::google::protobuf::Message {
 public:
  VerifyReq();
  virtual ~VerifyReq();

  VerifyReq(const VerifyReq& from);

  inline VerifyReq& operator=(const VerifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyReq& default_instance();

  void Swap(VerifyReq* other);

  // implements Message ----------------------------------------------

  VerifyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyReq& from);
  void MergeFrom(const VerifyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string macaddr = 1;
  inline bool has_macaddr() const;
  inline void clear_macaddr();
  static const int kMacaddrFieldNumber = 1;
  inline const ::std::string& macaddr() const;
  inline void set_macaddr(const ::std::string& value);
  inline void set_macaddr(const char* value);
  inline void set_macaddr(const char* value, size_t size);
  inline ::std::string* mutable_macaddr();
  inline ::std::string* release_macaddr();
  inline void set_allocated_macaddr(::std::string* macaddr);

  // @@protoc_insertion_point(class_scope:VerifyReq)
 private:
  inline void set_has_macaddr();
  inline void clear_has_macaddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* macaddr_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static VerifyReq* default_instance_;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  void Swap(LoginRsp* other);

  // implements Message ----------------------------------------------

  LoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isOK = 1;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsOKFieldNumber = 1;
  inline bool isok() const;
  inline void set_isok(bool value);

  // required int32 userId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRsp)
 private:
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool isok_;
  ::google::protobuf::int32 userid_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static LoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class VerifyRsp : public ::google::protobuf::Message {
 public:
  VerifyRsp();
  virtual ~VerifyRsp();

  VerifyRsp(const VerifyRsp& from);

  inline VerifyRsp& operator=(const VerifyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyRsp& default_instance();

  void Swap(VerifyRsp* other);

  // implements Message ----------------------------------------------

  VerifyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VerifyRsp& from);
  void MergeFrom(const VerifyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isOK = 1;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsOKFieldNumber = 1;
  inline bool isok() const;
  inline void set_isok(bool value);

  // @@protoc_insertion_point(class_scope:VerifyRsp)
 private:
  inline void set_has_isok();
  inline void clear_has_isok();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool isok_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static VerifyRsp* default_instance_;
};
// -------------------------------------------------------------------

class RegisterRsp : public ::google::protobuf::Message {
 public:
  RegisterRsp();
  virtual ~RegisterRsp();

  RegisterRsp(const RegisterRsp& from);

  inline RegisterRsp& operator=(const RegisterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRsp& default_instance();

  void Swap(RegisterRsp* other);

  // implements Message ----------------------------------------------

  RegisterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterRsp& from);
  void MergeFrom(const RegisterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isOK = 1;
  inline bool has_isok() const;
  inline void clear_isok();
  static const int kIsOKFieldNumber = 1;
  inline bool isok() const;
  inline void set_isok(bool value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 accid = 3;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 3;
  inline ::google::protobuf::int32 accid() const;
  inline void set_accid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RegisterRsp)
 private:
  inline void set_has_isok();
  inline void clear_has_isok();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_accid();
  inline void clear_has_accid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  bool isok_;
  ::google::protobuf::int32 accid_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static RegisterRsp* default_instance_;
};
// -------------------------------------------------------------------

class UserOnlineReq : public ::google::protobuf::Message {
 public:
  UserOnlineReq();
  virtual ~UserOnlineReq();

  UserOnlineReq(const UserOnlineReq& from);

  inline UserOnlineReq& operator=(const UserOnlineReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserOnlineReq& default_instance();

  void Swap(UserOnlineReq* other);

  // implements Message ----------------------------------------------

  UserOnlineReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserOnlineReq& from);
  void MergeFrom(const UserOnlineReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UserOnlineReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static UserOnlineReq* default_instance_;
};
// -------------------------------------------------------------------

class UserOfflineReq : public ::google::protobuf::Message {
 public:
  UserOfflineReq();
  virtual ~UserOfflineReq();

  UserOfflineReq(const UserOfflineReq& from);

  inline UserOfflineReq& operator=(const UserOfflineReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserOfflineReq& default_instance();

  void Swap(UserOfflineReq* other);

  // implements Message ----------------------------------------------

  UserOfflineReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserOfflineReq& from);
  void MergeFrom(const UserOfflineReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UserOfflineReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static UserOfflineReq* default_instance_;
};
// -------------------------------------------------------------------

class KickUserOutReq : public ::google::protobuf::Message {
 public:
  KickUserOutReq();
  virtual ~KickUserOutReq();

  KickUserOutReq(const KickUserOutReq& from);

  inline KickUserOutReq& operator=(const KickUserOutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickUserOutReq& default_instance();

  void Swap(KickUserOutReq* other);

  // implements Message ----------------------------------------------

  KickUserOutReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickUserOutReq& from);
  void MergeFrom(const KickUserOutReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:KickUserOutReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static KickUserOutReq* default_instance_;
};
// -------------------------------------------------------------------

class DoSthReq : public ::google::protobuf::Message {
 public:
  DoSthReq();
  virtual ~DoSthReq();

  DoSthReq(const DoSthReq& from);

  inline DoSthReq& operator=(const DoSthReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoSthReq& default_instance();

  void Swap(DoSthReq* other);

  // implements Message ----------------------------------------------

  DoSthReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DoSthReq& from);
  void MergeFrom(const DoSthReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // required string sth = 2;
  inline bool has_sth() const;
  inline void clear_sth();
  static const int kSthFieldNumber = 2;
  inline const ::std::string& sth() const;
  inline void set_sth(const ::std::string& value);
  inline void set_sth(const char* value);
  inline void set_sth(const char* value, size_t size);
  inline ::std::string* mutable_sth();
  inline ::std::string* release_sth();
  inline void set_allocated_sth(::std::string* sth);

  // @@protoc_insertion_point(class_scope:DoSthReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sth();
  inline void clear_has_sth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sth_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static DoSthReq* default_instance_;
};
// -------------------------------------------------------------------

class DoSthRsp : public ::google::protobuf::Message {
 public:
  DoSthRsp();
  virtual ~DoSthRsp();

  DoSthRsp(const DoSthRsp& from);

  inline DoSthRsp& operator=(const DoSthRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoSthRsp& default_instance();

  void Swap(DoSthRsp* other);

  // implements Message ----------------------------------------------

  DoSthRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DoSthRsp& from);
  void MergeFrom(const DoSthRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rspID = 1;
  inline bool has_rspid() const;
  inline void clear_rspid();
  static const int kRspIDFieldNumber = 1;
  inline ::google::protobuf::int32 rspid() const;
  inline void set_rspid(::google::protobuf::int32 value);

  // required string ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline const ::std::string& ret() const;
  inline void set_ret(const ::std::string& value);
  inline void set_ret(const char* value);
  inline void set_ret(const char* value, size_t size);
  inline ::std::string* mutable_ret();
  inline ::std::string* release_ret();
  inline void set_allocated_ret(::std::string* ret);

  // @@protoc_insertion_point(class_scope:DoSthRsp)
 private:
  inline void set_has_rspid();
  inline void clear_has_rspid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ret_;
  ::google::protobuf::int32 rspid_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static DoSthRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginReq

// required string name = 1;
inline bool LoginReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LoginReq::name() const {
  // @@protoc_insertion_point(field_get:LoginReq.name)
  return *name_;
}
inline void LoginReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:LoginReq.name)
}
inline void LoginReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:LoginReq.name)
}
inline void LoginReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LoginReq.name)
}
inline ::std::string* LoginReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LoginReq.name)
  return name_;
}
inline ::std::string* LoginReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LoginReq.name)
}

// required string passwd = 2;
inline bool LoginReq::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& LoginReq::passwd() const {
  // @@protoc_insertion_point(field_get:LoginReq.passwd)
  return *passwd_;
}
inline void LoginReq::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:LoginReq.passwd)
}
inline void LoginReq::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:LoginReq.passwd)
}
inline void LoginReq::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LoginReq.passwd)
}
inline ::std::string* LoginReq::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LoginReq.passwd)
  return passwd_;
}
inline ::std::string* LoginReq::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LoginReq.passwd)
}

// -------------------------------------------------------------------

// RegisterReq

// required string name = 1;
inline bool RegisterReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RegisterReq::name() const {
  // @@protoc_insertion_point(field_get:RegisterReq.name)
  return *name_;
}
inline void RegisterReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:RegisterReq.name)
}
inline void RegisterReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RegisterReq.name)
}
inline void RegisterReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RegisterReq.name)
}
inline ::std::string* RegisterReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RegisterReq.name)
  return name_;
}
inline ::std::string* RegisterReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegisterReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RegisterReq.name)
}

// required string passwd = 2;
inline bool RegisterReq::has_passwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterReq::set_has_passwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterReq::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterReq::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& RegisterReq::passwd() const {
  // @@protoc_insertion_point(field_get:RegisterReq.passwd)
  return *passwd_;
}
inline void RegisterReq::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:RegisterReq.passwd)
}
inline void RegisterReq::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:RegisterReq.passwd)
}
inline void RegisterReq::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RegisterReq.passwd)
}
inline ::std::string* RegisterReq::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RegisterReq.passwd)
  return passwd_;
}
inline ::std::string* RegisterReq::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegisterReq::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RegisterReq.passwd)
}

// -------------------------------------------------------------------

// VerifyReq

// required string macaddr = 1;
inline bool VerifyReq::has_macaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyReq::set_has_macaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyReq::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyReq::clear_macaddr() {
  if (macaddr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macaddr_->clear();
  }
  clear_has_macaddr();
}
inline const ::std::string& VerifyReq::macaddr() const {
  // @@protoc_insertion_point(field_get:VerifyReq.macaddr)
  return *macaddr_;
}
inline void VerifyReq::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  if (macaddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macaddr_ = new ::std::string;
  }
  macaddr_->assign(value);
  // @@protoc_insertion_point(field_set:VerifyReq.macaddr)
}
inline void VerifyReq::set_macaddr(const char* value) {
  set_has_macaddr();
  if (macaddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macaddr_ = new ::std::string;
  }
  macaddr_->assign(value);
  // @@protoc_insertion_point(field_set_char:VerifyReq.macaddr)
}
inline void VerifyReq::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  if (macaddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macaddr_ = new ::std::string;
  }
  macaddr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VerifyReq.macaddr)
}
inline ::std::string* VerifyReq::mutable_macaddr() {
  set_has_macaddr();
  if (macaddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    macaddr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:VerifyReq.macaddr)
  return macaddr_;
}
inline ::std::string* VerifyReq::release_macaddr() {
  clear_has_macaddr();
  if (macaddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = macaddr_;
    macaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VerifyReq::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete macaddr_;
  }
  if (macaddr) {
    set_has_macaddr();
    macaddr_ = macaddr;
  } else {
    clear_has_macaddr();
    macaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:VerifyReq.macaddr)
}

// -------------------------------------------------------------------

// LoginRsp

// required bool isOK = 1;
inline bool LoginRsp::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRsp::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRsp::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRsp::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool LoginRsp::isok() const {
  // @@protoc_insertion_point(field_get:LoginRsp.isOK)
  return isok_;
}
inline void LoginRsp::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:LoginRsp.isOK)
}

// required int32 userId = 2;
inline bool LoginRsp::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRsp::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRsp::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 LoginRsp::userid() const {
  // @@protoc_insertion_point(field_get:LoginRsp.userId)
  return userid_;
}
inline void LoginRsp::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:LoginRsp.userId)
}

// -------------------------------------------------------------------

// VerifyRsp

// required bool isOK = 1;
inline bool VerifyRsp::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyRsp::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyRsp::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyRsp::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool VerifyRsp::isok() const {
  // @@protoc_insertion_point(field_get:VerifyRsp.isOK)
  return isok_;
}
inline void VerifyRsp::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:VerifyRsp.isOK)
}

// -------------------------------------------------------------------

// RegisterRsp

// required bool isOK = 1;
inline bool RegisterRsp::has_isok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterRsp::set_has_isok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterRsp::clear_has_isok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterRsp::clear_isok() {
  isok_ = false;
  clear_has_isok();
}
inline bool RegisterRsp::isok() const {
  // @@protoc_insertion_point(field_get:RegisterRsp.isOK)
  return isok_;
}
inline void RegisterRsp::set_isok(bool value) {
  set_has_isok();
  isok_ = value;
  // @@protoc_insertion_point(field_set:RegisterRsp.isOK)
}

// required string name = 2;
inline bool RegisterRsp::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterRsp::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RegisterRsp::name() const {
  // @@protoc_insertion_point(field_get:RegisterRsp.name)
  return *name_;
}
inline void RegisterRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:RegisterRsp.name)
}
inline void RegisterRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RegisterRsp.name)
}
inline void RegisterRsp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RegisterRsp.name)
}
inline ::std::string* RegisterRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RegisterRsp.name)
  return name_;
}
inline ::std::string* RegisterRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegisterRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RegisterRsp.name)
}

// required int32 accid = 3;
inline bool RegisterRsp::has_accid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterRsp::set_has_accid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterRsp::clear_has_accid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterRsp::clear_accid() {
  accid_ = 0;
  clear_has_accid();
}
inline ::google::protobuf::int32 RegisterRsp::accid() const {
  // @@protoc_insertion_point(field_get:RegisterRsp.accid)
  return accid_;
}
inline void RegisterRsp::set_accid(::google::protobuf::int32 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:RegisterRsp.accid)
}

// -------------------------------------------------------------------

// UserOnlineReq

// required int32 uid = 1;
inline bool UserOnlineReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserOnlineReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserOnlineReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserOnlineReq::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 UserOnlineReq::uid() const {
  // @@protoc_insertion_point(field_get:UserOnlineReq.uid)
  return uid_;
}
inline void UserOnlineReq::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:UserOnlineReq.uid)
}

// -------------------------------------------------------------------

// UserOfflineReq

// required int32 uid = 1;
inline bool UserOfflineReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserOfflineReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserOfflineReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserOfflineReq::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 UserOfflineReq::uid() const {
  // @@protoc_insertion_point(field_get:UserOfflineReq.uid)
  return uid_;
}
inline void UserOfflineReq::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:UserOfflineReq.uid)
}

// -------------------------------------------------------------------

// KickUserOutReq

// required int32 uid = 1;
inline bool KickUserOutReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickUserOutReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickUserOutReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickUserOutReq::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 KickUserOutReq::uid() const {
  // @@protoc_insertion_point(field_get:KickUserOutReq.uid)
  return uid_;
}
inline void KickUserOutReq::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:KickUserOutReq.uid)
}

// -------------------------------------------------------------------

// DoSthReq

// required int32 uid = 1;
inline bool DoSthReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DoSthReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DoSthReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DoSthReq::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 DoSthReq::uid() const {
  // @@protoc_insertion_point(field_get:DoSthReq.uid)
  return uid_;
}
inline void DoSthReq::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:DoSthReq.uid)
}

// required string sth = 2;
inline bool DoSthReq::has_sth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DoSthReq::set_has_sth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DoSthReq::clear_has_sth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DoSthReq::clear_sth() {
  if (sth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sth_->clear();
  }
  clear_has_sth();
}
inline const ::std::string& DoSthReq::sth() const {
  // @@protoc_insertion_point(field_get:DoSthReq.sth)
  return *sth_;
}
inline void DoSthReq::set_sth(const ::std::string& value) {
  set_has_sth();
  if (sth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sth_ = new ::std::string;
  }
  sth_->assign(value);
  // @@protoc_insertion_point(field_set:DoSthReq.sth)
}
inline void DoSthReq::set_sth(const char* value) {
  set_has_sth();
  if (sth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sth_ = new ::std::string;
  }
  sth_->assign(value);
  // @@protoc_insertion_point(field_set_char:DoSthReq.sth)
}
inline void DoSthReq::set_sth(const char* value, size_t size) {
  set_has_sth();
  if (sth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sth_ = new ::std::string;
  }
  sth_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DoSthReq.sth)
}
inline ::std::string* DoSthReq::mutable_sth() {
  set_has_sth();
  if (sth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sth_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DoSthReq.sth)
  return sth_;
}
inline ::std::string* DoSthReq::release_sth() {
  clear_has_sth();
  if (sth_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sth_;
    sth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DoSthReq::set_allocated_sth(::std::string* sth) {
  if (sth_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sth_;
  }
  if (sth) {
    set_has_sth();
    sth_ = sth;
  } else {
    clear_has_sth();
    sth_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DoSthReq.sth)
}

// -------------------------------------------------------------------

// DoSthRsp

// required int32 rspID = 1;
inline bool DoSthRsp::has_rspid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DoSthRsp::set_has_rspid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DoSthRsp::clear_has_rspid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DoSthRsp::clear_rspid() {
  rspid_ = 0;
  clear_has_rspid();
}
inline ::google::protobuf::int32 DoSthRsp::rspid() const {
  // @@protoc_insertion_point(field_get:DoSthRsp.rspID)
  return rspid_;
}
inline void DoSthRsp::set_rspid(::google::protobuf::int32 value) {
  set_has_rspid();
  rspid_ = value;
  // @@protoc_insertion_point(field_set:DoSthRsp.rspID)
}

// required string ret = 2;
inline bool DoSthRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DoSthRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DoSthRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DoSthRsp::clear_ret() {
  if (ret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_->clear();
  }
  clear_has_ret();
}
inline const ::std::string& DoSthRsp::ret() const {
  // @@protoc_insertion_point(field_get:DoSthRsp.ret)
  return *ret_;
}
inline void DoSthRsp::set_ret(const ::std::string& value) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_ = new ::std::string;
  }
  ret_->assign(value);
  // @@protoc_insertion_point(field_set:DoSthRsp.ret)
}
inline void DoSthRsp::set_ret(const char* value) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_ = new ::std::string;
  }
  ret_->assign(value);
  // @@protoc_insertion_point(field_set_char:DoSthRsp.ret)
}
inline void DoSthRsp::set_ret(const char* value, size_t size) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_ = new ::std::string;
  }
  ret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DoSthRsp.ret)
}
inline ::std::string* DoSthRsp::mutable_ret() {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DoSthRsp.ret)
  return ret_;
}
inline ::std::string* DoSthRsp::release_ret() {
  clear_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ret_;
    ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DoSthRsp::set_allocated_ret(::std::string* ret) {
  if (ret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ret_;
  }
  if (ret) {
    set_has_ret();
    ret_ = ret;
  } else {
    clear_has_ret();
    ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DoSthRsp.ret)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
